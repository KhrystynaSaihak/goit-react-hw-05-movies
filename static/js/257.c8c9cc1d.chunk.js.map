{"version":3,"file":"static/js/257.c8c9cc1d.chunk.js","mappings":"qTAGaA,GAAUC,EAAAA,EAAAA,SAAOC,EAAAA,GAAPD,CAAH,yZAoBPE,EAAYF,EAAAA,QAAAA,IAAH,4GAOTG,EAAcH,EAAAA,QAAAA,IAAH,mFAMXI,EAAUJ,EAAAA,QAAAA,GAAH,qP,SCmCpB,EA1DqB,WAAO,IAAD,IACzB,GAAkCK,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAQ,iBAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAUK,aAAb,aAAG,EAAiBC,YAApB,QAA4B,IAc1C,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,WAAMC,GAAN,iGAESC,EAAAA,EAAAA,IAAaD,GAFtB,OAERE,EAFQ,OAGdd,EAAac,GACbZ,EAAUY,EAASb,QAJL,gDAMdc,QAAQC,IAAR,MANc,yDAAH,sDASfL,EAAUN,EACX,GAAE,CAACA,KAEF,6BACE,SAACb,EAAD,CAASyB,GAAIV,EAAb,uBACA,UAACZ,EAAD,YACE,gBAAKuB,IAzBG,kCAyBYnB,EAAUoB,YAAaC,IAAI,MAC/C,UAACxB,EAAD,YACE,0BACGG,EAAUsB,eADb,IAEGC,IAAOvB,EAAUwB,cAAcC,OAAO,QAFzC,QAIA,0CAAkBzB,EAAU0B,WAA5B,QACA,4BACE,qCACC1B,EAAU2B,aAEb,4BACE,mCACCzB,EAAO0B,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACV,4BAAkBA,EAAlB,MAAWA,EADD,cAMlB,4BACE,oDACA,UAAC/B,EAAD,YACE,yBACE,SAAC,KAAD,CAASoB,GAAG,OAAZ,qBAEF,yBACE,SAAC,KAAD,CAASA,GAAG,UAAZ,2BAGJ,SAAC,KAAD,SAIP,C,mMCjEKY,EAAU,mCACVC,EAAM,8BAENC,EAAiB,mCAAG,sGACDC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,wCACiBD,IAFhB,uBAChBI,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,qDAOjBpB,EAAY,mCAAG,WAAMqB,GAAN,yFACIF,EAAAA,EAAAA,IAAA,UAClBF,EADkB,mBACJI,EADI,oBACgBL,IAFpB,uBACXI,EADW,EACXA,KADW,kBAIZA,GAJY,2CAAH,sDAOZE,EAAY,mCAAG,WAAMD,GAAN,yFACIF,EAAAA,EAAAA,IAAA,UAClBF,EADkB,mBACJI,EADI,4BACwBL,IAF5B,uBACXI,EADW,EACXA,KADW,kBAIZA,GAJY,2CAAH,sDAOZG,EAAe,mCAAG,WAAMF,GAAN,yFACCF,EAAAA,EAAAA,IAAA,UAClBF,EADkB,mBACJI,EADI,4BACwBL,IAFzB,uBACdI,EADc,EACdA,KADc,kBAIfA,GAJe,2CAAH,sDAOfI,EAAW,mCAAG,WAAMC,GAAN,yFACKN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kCACWD,EADX,kBAC4BS,IAFjC,uBACVL,EADU,EACVA,KADU,kBAIXA,GAJW,2CAAH,qD","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/themoviedbService.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const BackBtn = styled(NavLink)`\n  text-decoration: none;\n  color: white;\n  font-weight: 500;\n  margin-right: 20px;\n  transition: background-color 0.5s, color 0.5s;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 150px;\n  height: 30px;\n  margin-bottom: 20px;\n  background-color: var(--color-text);\n\n  &:hover {\n    color: white;\n    background-color: var(--color-btn);\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nexport const LinkBox = styled.ul`\n  display: flex;\n  gap: 20px;\n  margin-top: 15px;\n  margin-bottom: 15px;\n\n  a {\n    display: block;\n    text-decoration: none;\n    color: white;\n    background-color: var(--color-text);\n    padding: 10px;\n  }\n`;\n","import { Outlet, NavLink, useLocation, useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport Moment from 'moment';\nimport { getMovieById } from 'services/themoviedbService';\nimport {\n  BackBtn,\n  Container,\n  Description,\n  LinkBox,\n} from './MovieDetails.styled';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w300';\n\nconst MovieDetails = () => {\n  const [movieData, movieDataSet] = useState({});\n  const [genres, setGenres] = useState([]);\n  const location = useLocation();\n  const { movieId } = useParams();\n  const backLink = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    const fetchData = async id => {\n      try {\n        const response = await getMovieById(id);\n        movieDataSet(response);\n        setGenres(response.genres);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchData(movieId);\n  }, [movieId]);\n  return (\n    <main>\n      <BackBtn to={backLink}> Go back</BackBtn>\n      <Container>\n        <img src={IMG_URL + movieData.poster_path} alt=\"\"></img>\n        <Description>\n          <h3>\n            {movieData.original_title}(\n            {Moment(movieData.release_date).format('YYYY')})\n          </h3>\n          <div>User Score: {movieData.vote_count}%</div>\n          <div>\n            <h3>Overview</h3>\n            {movieData.overview}\n          </div>\n          <div>\n            <h3>Genres</h3>\n            {genres.map(({ name }) => (\n              <span key={name}>{name} </span>\n            ))}\n          </div>\n        </Description>\n      </Container>\n      <div>\n        <h3>Additional information</h3>\n        <LinkBox>\n          <li>\n            <NavLink to=\"cast\">Cast</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\">Reviews</NavLink>\n          </li>\n        </LinkBox>\n        <Outlet />\n      </div>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import Axios from 'axios';\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst API_KEY = '2b316c342fe13f9049052886494c29f1';\nconst URL = 'https://api.themoviedb.org/';\n\nconst getTrendingMovies = async () => {\n  const { data } = await Axios.get(\n    `${URL}3/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst getMovieById = async movie_id => {\n  const { data } = await Axios.get(\n    `${URL}3/movie/${movie_id}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst getMovieCast = async movie_id => {\n  const { data } = await Axios.get(\n    `${URL}3/movie/${movie_id}/credits?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst getMovieReviews = async movie_id => {\n  const { data } = await Axios.get(\n    `${URL}3/movie/${movie_id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst searchMovie = async query => {\n  const { data } = await Axios.get(\n    `${URL}3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return data;\n};\n\nexport {\n  getTrendingMovies,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n  searchMovie,\n};\n"],"names":["BackBtn","styled","NavLink","Container","Description","LinkBox","useState","movieData","movieDataSet","genres","setGenres","location","useLocation","movieId","useParams","backLink","state","from","useEffect","fetchData","id","getMovieById","response","console","log","to","src","poster_path","alt","original_title","Moment","release_date","format","vote_count","overview","map","name","API_KEY","URL","getTrendingMovies","Axios","data","movie_id","getMovieCast","getMovieReviews","searchMovie","query"],"sourceRoot":""}