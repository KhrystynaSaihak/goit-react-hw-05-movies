{"version":3,"file":"static/js/691.9933028f.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/themoviedbService.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n  gap: 15px;\n`;\n\nexport const MovieItem = styled.li`\n  flex: 49%;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  display: block;\n  border: 2px solid #bde3f3;\n  padding: 10px;\n  color: #4b4870;\n\n  &:hover {\n    border: 2px solid #c0dbe6;\n  }\n\n  &:visited {\n    color: #9397b7;\n  }\n`;\n\n//\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, MovieItem, MovieLink } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ original_title, id }) => (\n        <MovieItem key={id}>\n          <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n            {original_title}\n          </MovieLink>\n        </MovieItem>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object),\n};\n","import styled from 'styled-components';\n\nexport const SearchbarFormBox = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: var(--color-blue-hover);\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormBtn = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { searchMovie } from 'services/themoviedbService';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useSearchParams } from 'react-router-dom';\n\nimport {\n  SearchbarFormBox,\n  SearchForm,\n  SearchFormBtn,\n  SearchFormInput,\n} from './Movies.styled';\nimport { FaSearch } from 'react-icons/fa';\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const MovieName = searchParams.get('name') ?? '';\n\n  useEffect(() => {\n    if (MovieName === '') {\n      return;\n    }\n    setQuery(MovieName);\n    const fetchMovies = async query => {\n      try {\n        const response = await searchMovie(query);\n        setMovies(response.results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchMovies(MovieName);\n  }, [MovieName]);\n\n  const updateQueryString = name => {\n    const nextParams = name !== '' ? { name } : {};\n    setSearchParams(nextParams);\n  };\n\n  const handleChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    e.target.name.value = '';\n    updateQueryString(query);\n    setQuery('');\n  };\n\n  return (\n    <main>\n      <SearchbarFormBox>\n        <SearchForm onSubmit={onSubmit}>\n          <SearchFormBtn type=\"submit\">\n            <FaSearch />\n          </SearchFormBtn>\n\n          <SearchFormInput\n            name=\"name\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movie\"\n            onChange={handleChange}\n            value={query}\n          />\n        </SearchForm>\n      </SearchbarFormBox>\n      <MoviesList movies={movies}></MoviesList>\n    </main>\n  );\n};\n\nexport default Movies;\n","import Axios from 'axios';\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst API_KEY = '2b316c342fe13f9049052886494c29f1';\nconst URL = 'https://api.themoviedb.org/';\n\nconst getTrendingMovies = async () => {\n  const { data } = await Axios.get(\n    `${URL}3/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst getMovieById = async movie_id => {\n  const { data } = await Axios.get(\n    `${URL}3/movie/${movie_id}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst getMovieCast = async movie_id => {\n  const { data } = await Axios.get(\n    `${URL}3/movie/${movie_id}/credits?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst getMovieReviews = async movie_id => {\n  const { data } = await Axios.get(\n    `${URL}3/movie/${movie_id}/reviews?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nconst searchMovie = async query => {\n  const { data } = await Axios.get(\n    `${URL}3/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return data;\n};\n\nexport {\n  getTrendingMovies,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n  searchMovie,\n};\n"],"names":["List","styled","MovieItem","MovieLink","Link","MoviesList","movies","location","useLocation","map","original_title","id","to","state","from","SearchbarFormBox","SearchForm","SearchFormBtn","SearchFormInput","useState","query","setQuery","setMovies","useSearchParams","searchParams","setSearchParams","MovieName","get","useEffect","fetchMovies","searchMovie","response","results","console","log","onSubmit","e","name","preventDefault","target","value","type","autoComplete","autoFocus","placeholder","onChange","event","API_KEY","URL","getTrendingMovies","Axios","data","getMovieById","movie_id","getMovieCast","getMovieReviews"],"sourceRoot":""}